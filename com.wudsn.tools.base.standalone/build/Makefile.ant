<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!-- This ANT file provides taks which can be call from a consuming project. -->
<project name="Create Executables based on runnable Jars" basedir="..">
	<!-- ANT 1.7 is required  -->
	<!-- The .jar file with the jarbundler task must be add in the ANT path in the preferences  -->
	<taskdef name="jarbundler" classname="com.ultramixer.jarbundler.JarBundler" />

	<target name="create_standalone_executables">
		<fail unless="applicationFolder" />
		<fail unless="applicationName" />
		<fail unless="applicationNameLowerCase" />
		<fail unless="applicationTitle" />
		<fail unless="applicationSupportURL" />
		<fail unless="applicationMainClass" />

		<!-- Library related properies must be defined, but can be empty. -->
		<fail unless="applicationLibFolder" />
		<fail unless="applicationLibList" />
		<fail unless="applicationPlatformLib" />

		<fail unless="iconFilePath" />
		<fail unless="icnsFilePath" />

		<fail unless="authors" />
		<!-- Requires the "releaseYears", "release" (x.y.z format) and the "version" information passed as properties. -->
		<fail unless="releaseYears" />
		<fail unless="release" />
		<fail unless="version" />

		<ant dir="${buildFolder}" antfile="build/Makefile.ant" target="create_standalone_executable">

			<property name="platformOS" value="win32" />
			<property name="platformArchitecture" value="x86_64" />
			<property name="platformBits" value="64" />
			<property name="platformArchiveFormat" value="zip" />
		</ant>

		<ant dir="${buildFolder}" antfile="build/Makefile.ant" target="create_standalone_executable">

			<property name="platformOS" value="linux" />
			<property name="platformArchitecture" value="x86_64" />
			<property name="platformBits" value="64" />
			<property name="platformArchiveFormat" value="tar_gz" />
		</ant>

		<ant dir="${buildFolder}" antfile="build/Makefile.ant" target="create_standalone_executable">

			<property name="platformOS" value="macos" />
			<property name="platformArchitecture" value="aarch64" />
			<property name="platformBits" value="64" />
			<property name="platformArchiveFormat" value="tar_gz" />
		</ant>

		<ant dir="${buildFolder}" antfile="build/Makefile.ant" target="create_standalone_executable">

			<property name="platformOS" value="macos" />
			<property name="platformArchitecture" value="x86_64" />
			<property name="platformBits" value="64" />
			<property name="platformArchiveFormat" value="tar_gz" />
		</ant>
	</target>

	<target name="create_standalone_executable">

		<fail unless="outFolder" />
		<!-- Possible values are "linux", "macos", "win32" -->
		<fail unless="platformOS" />
		<!-- Possible values are "x86_64", "aarch64" -->
		<fail unless="platformArchitecture" />
		<!-- Possible values are "32", "64" -->
		<fail unless="platformBits" />
		<!-- Possible values are "zip", "tar_gz" -->
		<fail unless="platformArchiveFormat" />

		<echo message="Creating version '${version}' of release ${release} of '${applicationName}' in ${releaseYears} by ${authors}." />

		<mkdir dir="${outFolder}" />

		<!-- Determine readable text fpr ${platformOS} -->
		<condition property="platformOSText" value="Windows">
			<equals arg1="${platformOS}" arg2="win32" />
		</condition>
		<condition property="platformOSText" value="Linux">
			<equals arg1="${platformOS}" arg2="linux" />
		</condition>
		<condition property="platformOSText" value="macOS">
			<equals arg1="${platformOS}" arg2="macos" />
		</condition>

		<property name="platform" value="${platformOS}-${platformArchitecture}" />
		<property name="platformText" value="${platformOSText} ${platformArchitecture} (${platformBits})" />
		<antcall target="create_platform_jar">
			<param name="platform" value="${platform}" />
			<param name="platformText" value="${platformText}" />
		</antcall>

		<!-- Create exe wrappers/scripts -->


		<!-- Create Windows executable -->
		<antcall target="create_for_${platformOS}_${platformArchitecture}">
			<param name="platform" value="${platform}" />
			<param name="jreRuntimeBits" value="${platformBits}" />
		</antcall>

		<!-- Remove jars that have been wrapped before zipping -->
		<delete file="${outFolder}/${platform}/${applicationName}.jar" failonerror="true" />

		<antcall target="create_platform_${platformArchiveFormat}">
			<param name="platform" value="${platform}" />
		</antcall>

	</target>

	<target name="create_platform_text_file" if="applicationPlatformTextFile">
		<echo message="Creating platform text file ${applicationPlatformTextFile}" />
		<echo message="${platformText}" file="${applicationPlatformTextFile}" />
	</target>

	<target name="create_platform_jar">
		<fail unless="applicationBinFolder" />

		<echo message="Creating '${platformText}' as ${platform}." />
		<antcall target="create_platform_text_file" />

		<property name="applicationPlatformLibFolder" location="lib/${platform}" />
		<zipfileset id="lib.fileset1" dir="${applicationLibFolder}">
			<include name="*.jar" />
		</zipfileset>
		<zipfileset id="lib.fileset2" dir="${applicationPlatformLibFolder}">
			<include name="${applicationPlatformLib}" />
		</zipfileset>

		<pathconvert property="applicationLibFileList" pathsep=" ">
			<fileset refid="lib.fileset1" />
			<map from="${applicationLibFolder}${file.separator}" to="" />
			<map from="${applicationPlatformLibFolder}${file.separator}" to="" />
			<fileset refid="lib.fileset2" />
		</pathconvert>


		<mkdir dir="${outFolder}/${platform}" />
		<delete file="${outFolder}/${platform}/${applicationName}.jar" />
		<jar destfile="${outFolder}/${platform}/${applicationName}.jar">
			<manifest>
				<attribute name="Main-Class" value="org.eclipse.jdt.internal.jarinjarloader.JarRsrcLoader" />
				<attribute name="Class-Path" value="." />
				<attribute name="Rsrc-Main-Class" value="${applicationMainClass}" />
				<attribute name="Rsrc-Class-Path" value="./ ${applicationLibList} ${applicationPlatformLib}" />
			</manifest>
			<zipfileset src="lib/jar-in-jar-loader.zip" />
			<fileset dir="${applicationBinFolder}" />
			<zipfileset refid="lib.fileset1" />
			<zipfileset refid="lib.fileset2" />
		</jar>
	</target>

	<target name="create_readme">
		<property name="readmeFile" value="${outFolder}/${platform}/Readme.txt" />
		<property name="versionText" value="${applicationTitle} for ${platform}, JRE ${jreMinVersion} (${jreRuntimeBits}-bit)" />
		<echo message="Creating executable ${versionText}" />
		<echo message="${versionText}. (C) ${releaseYears} ${authors}. Visit ${applicationSupportURL} for details." file="${readmeFile}" />
	</target>

	<target name="create_for_linux_x86_64">
		<antcall target="create_readme" />
		<property name="applicationFile" value="${outFolder}/${platform}/${applicationName}" />

		<concat destfile="${applicationFile}" binary="yes">
			<fileset file="build/linux/stub.sh" />
			<fileset file="${applicationFile}.jar" />
		</concat>
	</target>

	<target name="create_for_macos_generic">
		<antcall target="create_readme" />
		<property name="applicationFile" value="${outFolder}/${platform}/${applicationName}" />

		<fail unless="platform" />
		<fail unless="icnsFilePath" />

		<property name="jarFile" value="${applicationFile}.jar" />
		<property name="appDir" value="${applicationFile}.app" />

		<mkdir dir="${appDir}" />
		<!-- See the jarbundler documentation for details on the task -->
		<!-- The ".icns" file was created using https://iconverticons.com/online/ -->
		<!-- In the past, the "-XstartOnFirstThread" VM parameter was required for 64-bit macOS, see https://www.eclipse.org/swt/macosx/ -->
		<jarbundler dir="${outFolder}/${platform}/" name="${applicationName}" copyright="(C) ${releaseYears} ${authors}" shortname="${applicationTitle}" build="${version}" icon="${icnsFilePath}" useJavaXKey="true" mainclass="org.eclipse.jdt.internal.jarinjarloader.JarRsrcLoader" jar="${jarFile}" jvmversion="${jreMinVersion}+" vmoptions="-Xms256M -Xmx256M" stubfile="${applicationName}">
		</jarbundler>
		<copy tofile="${appDir}/Contents/MacOS/${applicationName}" overwrite="true">
			<fileset file="build/macos/universalJavaApplicationStub" />
		</copy>
	</target>

	<target name="create_for_macos_aarch64">
		<antcall target="create_for_macos_generic" />
	</target>


	<target name="create_for_macos_x86_64">
		<antcall target="create_for_macos_generic" />
	</target>

	<target name="create_for_win32_x86_64">
		<antcall target="create_readme" />
		<property name="applicationFile" value="${outFolder}/${platform}/${applicationName}" />

		<fail unless="applicationFolder" />
		<fail unless="applicationName" />
		<fail unless="applicationTitle" />
		<fail unless="applicationSupportURL" />
		<fail unless="iconFilePath" />

		<fail unless="authors" />
		<fail unless="releaseYears" />
		<fail unless="release" />
		<fail unless="version" />
		<fail unless="platform" />

		<fail unless="jreMinVersion" />
		<fail unless="jreRuntimeBits" />


		<property name="xml" value="Launch4j.xml" />
		<property name="applicationExecutableName" value="${applicationName}.exe" />

		<copy todir="${outFolder}" overwrite="true">
			<fileset file="build/windows/${xml}" />
			<filterset>
				<filter token="APPLICATION_HEADER_TYPE" value="${applicationHeaderType}" />
				<filter token="APPLICATION_NAME" value="${applicationName}" />
				<filter token="APPLICATION_TITLE" value="${applicationTitle}" />
				<filter token="APPLICATION_SUPPORT_URL" value="${applicationSupportURL}" />
				<filter token="AUTHORS" value="${authors}" />
				<filter token="RELEASE_YEARS" value="${releaseYears}" />
				<filter token="RELEASE" value="${release}" />
				<filter token="VERSION" value="${version}" />
				<filter token="PLATFORM_ID" value="${platform}" />
				<filter token="JRE_MIN_VERSION" value="${jreMinVersion}" />
				<filter token="JRE_RUNTIME_BITS" value="${jreRuntimeBits}" />
				<filter token="JAR_FILE_PATH" value="${outFolder}\${platform}\${applicationName}.jar" />
				<filter token="ICON_FILE_PATH" value="${iconFilePath}" />
				<filter token="OUT_FILE_PATH" value="${outFolder}\${platform}\${applicationExecutableName}" />
				<filter token="ORIGINAL_FILENAME" value="${applicationExecutableName}" />
			</filterset>
		</copy>

		<exec executable="C:\jac\system\Java\Tools\RUN\launch4j\launch4jc.exe" failifexecutionfails="true" failonerror="true">
			<arg value="${outFolder}/${xml}" />
		</exec>
		<delete file="${outFolder}/${xml}" />
	</target>

	<target name="delete_platform_folder" unless="keepPlatformFolders">
		<delete dir="${outFolder}/${platform}" />
	</target>

	<!-- ZIP code and source from Eclipse workspace to "out" folder.
	-->
	<target name="create_platform_zip">
		<fail unless="applicationNameLowerCase" />
		<fail unless="platform" />

		<property name="platformZipFile" value="${outFolder}/${applicationNameLowerCase}-${platform}.zip" />
		<echo message="Creating platform archive ${platformZipFile}" />
		<delete file="${platformZipFile}" />

		<zip destfile="${platformZipFile}" basedir="${outFolder}/${platform}" />

		<antcall target="delete_platform_folder" />
	</target>

	<!-- TAR and GZIP code and source from Eclipse workspace to "out" folder.
	     The regular "zip" task cannot preserve the executable flags for Unix, therefore we use "tar"
	-->
	<target name="create_platform_tar_gz">
		<fail unless="applicationNameLowerCase" />
		<fail unless="platform" />

		<property name="platformZipFile" value="${outFolder}/${applicationNameLowerCase}-${platform}.tar.gz" />
		<echo message="Creating platform archive ${platformZipFile}" />
		<delete file="${platformZipFile}" />

		<tar destfile="${platformZipFile}" compression="gzip">
			<tarfileset dir="${outFolder}/${platform}" filemode="755">
				<exclude name="*.txt" />
			</tarfileset>
			<tarfileset dir="${outFolder}/${platform}" filemode="644">
				<include name="*.txt" />
			</tarfileset>
		</tar>

		<antcall target="delete_platform_folder" />
	</target>
</project>
